#############################
# Example env configuration #
#############################

###########
# General #
###########

# URL at which the backend server is served (required)
API_URL=

# URL at which the admin panel is served (required)
ADMIN_PANEL_URL=

# Port on which the server is listening (default: 54844)
# API_PORT=

# CORS allow origin value (default: *)
# CORS_ORIGIN=

#########
# HTTPS #
#########

# Path to the server HTTPS certificate
SERVER_CERTIFICATE=

# Path to the server private key for HTTPS
SERVER_PRIVATE_KEY=

###########
# MongoDB #
###########

# MongoDB connection string (required)
MONGO_CONNECTION_STRING=

# User to use for authentication with MongoDB (overrides connection string)
# MONGO_USER=

# Password to use for authentication with MongoDB (overrides connection string)
# MONGO_PASSWORD=

# Database that should be used in MongoDB (overrides connection string)
# MONGO_DATABASE=

##########
# OAuth2 #
##########

# Google OAuth2 client ID (required)
GOOGLE_CLIENT_ID=

# Google OAuth2 client secret (required)
GOOGLE_CLIENT_SECRET=

#########################
# Authentication Tokens #
#########################

# Server identifier (recommended for security)
# This string can be anything, it must however be the same on all the server instances
# It is custom to use the server's public url for this (https://my-server.com)
# SERVER_ID=

# Duration of an access token validity (default: 1h)
# Integer values are considered milliseconds, but more complex structures can be used like "1d", or "2.5hrs"
# Format documentation: https://github.com/vercel/ms
# ACCESS_TOKEN_EXPIRATION=

# Secret used to sign access tokens
# If not set, a new one will be generated at each start, which will invalidate previous access tokens
# ACCESS_TOKEN_SECRET=

# Base64 representation of the key used to encrypt refresh tokens
# If not set, a new one will be generated at each start, which will invalidate previous refresh tokens
# It is highly recommended to set this parameter
# Generate one with one of these commands:
# > xxd -l32 -ps /dev/urandom | xxd -r -ps | base64
# > openssl rand -base64 32
# REFRESH_TOKEN_KEY_BASE64=

##############
# VPN Server #
##############

# Secret shared with the VPN server. It acts as an authentication mechanism and must be the same on both. (required)
VPN_SERVER_SECRET=

#############################
# Public Key Infrastructure #
#############################

# Path to the CA private key (required)
# The key can be generated with this command
# > openssl genrsa -out ca.key 4096
CA_PRIVATE_KEY=

# Path to the CA certificate (required)
# The API acts as a CA and signs + distributes certificates to all the servers and clients in the network
# The certificate can be generated with this command
# > openssl req -x509 -new -nodes -key ca.key -sha256 -days 1826 -out ca.crt
CA_CERTIFICATE=
